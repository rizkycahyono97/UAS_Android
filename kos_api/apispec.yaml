# Versi spesifikasi OpenAPI yang digunakan
openapi: 3.0.3

# Informasi dasar tentang API Anda
info:
  title: "Nge-Kos Yuk! Ponorogo API"
  description: |-
    API  untuk aplikasi "Nge-Kos Yuk! Ponorogo".
    Menyediakan endpoint untuk mencari dan melihat detail data kos (kost) di area Ponorogo.
  version: "1.0.0"

# Daftar server tempat API ini di-host. Berguna untuk development, staging, dan production.
servers:
  - url: http://localhost:9000/api/v1
    description: Development Server

# Tag digunakan untuk mengelompokkan endpoint yang berhubungan
tags:
  - name: Kost
    description: Operasi yang berkaitan dengan data Kost

# Definisi semua path (endpoint) yang ada di API
paths:
  # Endpoint untuk mengambil semua data kost dengan filter
  /kosts:
    get:
      tags:
        - Kost
      summary: "Mendapatkan Daftar Kost dengan Filter"
      description: |-
        Mengambil daftar semua kost yang ada di database. 
        Endpoint ini mendukung filter melalui query parameter untuk mempersempit hasil pencarian. 
        Jika tidak ada filter yang diberikan, semua data kost akan dikembalikan.
      parameters:
        - name: nama
          in: query
          description: Filter berdasarkan nama kos (pencarian parsial/LIKE)
          required: false
          schema:
            type: string
        - name: alamat
          in: query
          description: Filter berdasarkan alamat kos (pencarian parsial/LIKE)
          required: false
          schema:
            type: string
        - name: tipe
          in: query
          description: Filter berdasarkan tipe kos
          required: false
          schema:
            type: string
            enum: [putra, putri, campur]
        - name: status
          in: query
          description: Filter berdasarkan status ketersediaan
          required: false
          schema:
            type: string
            enum: [tersedia, penuh]
        - name: min_harga
          in: query
          description: Filter harga minimum per bulan
          required: false
          schema:
            type: integer
            format: uint
        - name: max_harga
          in: query
          description: Filter harga maksimum per bulan
          required: false
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: "Sukses, mengembalikan daftar kost"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessKostListResponse'
        '400':
          description: "Bad Request. Parameter filter tidak valid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Endpoint untuk mengambil satu data kost berdasarkan ID
  /kosts/{id}:
    get:
      tags:
        - Kost
      summary: "Mendapatkan Detail Kost berdasarkan ID"
      description: "Mengambil informasi detail dari satu kost spesifik menggunakan ID uniknya."
      parameters:
        - name: id
          in: path
          description: ID unik dari kost yang ingin diambil
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: "Sukses, mengembalikan detail kost"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessKostDetailResponse'
        '404':
          description: "Not Found. Kost dengan ID tersebut tidak ditemukan."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# Komponen yang bisa digunakan kembali di berbagai bagian dokumentasi
components:
  schemas:
    # Skema untuk model FotoGaleri
    FotoGaleri:
      type: object
      properties:
        ID:
          type: integer
          format: uint
          example: 101
        KosID:
          type: integer
          format: uint
          example: 21
        UrlFoto:
          type: string
          format: uri
          example: "https://example.com/images/foto1.jpg"
        CreatedAt:
          type: string
          format: date-time

    # Skema untuk model utama Kost
    Kost:
      type: object
      properties:
        ID:
          type: integer
          format: uint
          example: 21
        Nama:
          type: string
          example: "Kos Erfa Sejahtera"
        Alamat:
          type: string
          example: "Jl. Pahlawan No. 45, Ponorogo"
        HargaPerBulan:
          type: integer
          format: uint
          example: 650000
        Tipe:
          type: string
          enum: [putra, putri, campur]
          example: "campur"
        Deskripsi:
          type: string
          example: "Kos nyaman dengan fasilitas lengkap, dekat dengan pusat kota."
        Fasilitas:
          type: string
          example: "Wi-Fi, AC, Parkir Motor, Dapur Bersama"
        FotoUtamaUrl:
          type: string
          format: uri
          example: "https://example.com/images/utama.jpg"
        Latitude:
          type: number
          format: double
          example: -7.879792
        Longitude:
          type: number
          format: double
          example: 111.466814
        NamaPemilik:
          type: string
          example: "Bapak Budi"
        TeleponPemilik:
          type: string
          example: "081234567890"
        WhatsappPemilik:
          type: string
          example: "081234567890"
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
        FotoGaleri:
          type: array
          items:
            $ref: '#/components/schemas/FotoGaleri'

    # Skema untuk respons sukses (daftar kost)
    SuccessKostListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Kost'

    # Skema untuk respons sukses (detail kost)
    SuccessKostDetailResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Kost'

    # Skema untuk respons error
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Not Found"
        details:
          type: string
          example: "Kos with ID 999 was not found"